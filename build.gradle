plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.BeatUp'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // QueryDSL 의존성
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // H2는 테스트 전용으로 이동
	testRuntimeOnly 'com.h2database:h2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0'

    // 데이터베이스 드라이버 변경
    runtimeOnly 'org.postgresql:postgresql' // PostgreSQL 활성화

    // Flyway 추가(스키마 버전 관리)
    implementation 'org.flywaydb:flyway-core'

    // PostgreSQL 지원을 위한 필수 플러그인
    implementation 'org.flywaydb:flyway-database-postgresql'

    // @Getter 어노테이션 활용
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // firebase 의존성 추가
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // JWT 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // API 클라이언트용
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // JSON/XML 파싱 지원
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

    // 캐싱
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    // 테스트
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// QueryDSL Q클래스 생성 설정 (핵심 수정 부분)
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java.srcDirs += [querydslDir]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

tasks.named('clean') {
    doLast {
        file(querydslDir).deleteDir()
    }
}


tasks.named('test') {
	useJUnitPlatform()
}
